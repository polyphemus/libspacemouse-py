import argparse

from .. import MIN_DEVIATION, N_EVENTS

from .list import main as list_main
from .led import main as led_main
from .event import main as event_main
from .raw import main as raw_main


def positive_int(value):
    ret = int(value)
    if ret < 1:
        raise argparse.ArgumentTypeError(str(ret) +
                                         " is not a valid positive integer")
    return ret


def main():
    common_parser = argparse.ArgumentParser(add_help=False)

    common_parser.add_argument("-D", "--devnode",
                               help=("regular expression which devices' "
                                     "devnode string must match"))
    common_parser.add_argument("-M", "--manufacturer",
                               help=("regular expression which devices' "
                                     "manufacturer string must match"))
    common_parser.add_argument("-P", "--product",
                               help=("regular expression which devices' "
                                     "devnode string must match help"))
    common_parser.add_argument("-i", "--ignore-case", action="store_true",
                               default=False,
                               help="case insensitive regex")

    main_parser = argparse.ArgumentParser(prog="spacemouse",
                                          parents=[common_parser])

    subparsers = main_parser.add_subparsers()

    list_help = "Print device information of connected 3D/6DoF input devices"
    parser_list = subparsers.add_parser("list", parents=[common_parser],
                                        help=list_help)
    parser_list.set_defaults(func=list_main)

    led_help = ("Print or manipulate the LED state of connected 3D/6DoF input "
                "devices")
    parser_led = subparsers.add_parser("led", parents=[common_parser],
                                       help=led_help)
    parser_led.set_defaults(func=led_main)

    parser_led.add_argument("action", nargs="?",
                            choices=("on", "off", "switch", "1", "0", "!"))

    event_help = "Print events generated by connected 3D/6DoF input devices"
    parser_event = subparsers.add_parser("event", parents=[common_parser],
                                         help=event_help)
    parser_event.set_defaults(func=event_main)

    parser_event.add_argument("-g", "--grab", action="store_true",
                              default=False,
                              help="grab matched/all devices")
    deviation_help = ("minimum deviation on an motion axis needed to register "
                      "as an event default is: " + str(MIN_DEVIATION))
    parser_event.add_argument("-d", "--deviation", type=positive_int,
                              default=MIN_DEVIATION,
                              help=deviation_help)
    events_help = ("number of consecutive events for which deviaton must "
                   "exceed minimum deviation before printing an event to "
                   "stdout default is: " + str(N_EVENTS))
    parser_event.add_argument("-n", "--events", type=positive_int,
                              default=N_EVENTS,
                              help=events_help)
    millis_help = ("millisecond period in which consecutive events' deviaton "
                   "must exceed minimum deviation before printing an event to "
                   "stdout")
    parser_event.add_argument("-m", "--milliseconds", type=positive_int,
                              default=0,
                              help=millis_help)

    raw_help = "Print comprehensive info of raw events and device changes"
    parser_raw = subparsers.add_parser("raw", parents=[common_parser],
                                       help=raw_help)
    parser_raw.set_defaults(func=raw_main)

    args = main_parser.parse_args()

    if hasattr(args, 'func'):
        args.func(args)
    else:
        list_main(args)
